+++
categories = ["general"]
date = "2016-05-11T06:07:56-04:00"
tags = ["document"]
title = "Lab05"
type = "lab"
+++

:compat-mode:
= Lab 05 - Leveraging Eureka for Service Discovery via Spring Cloud Netflix

NOTE: The completed code for this lab can be found at `$COURSE_HOME/spring-cloud-eureka/complete/springbox-catalog`.

[abstract]
--
Let's continue learning the components found in Spring Cloud to implement patterns for distributed systems.
We'll use Spring Cloud Netflix to deploy Eureka, which is a component offering service registration and discovery.

In this lab, we'll do the following:

. Create a Eureka server
. Update our previously developed microservice to register itself with Eureka and create a ``consumer,'' wire them up using Eureka, and test them.
. Deploy the Eureka server to Pivotal Cloud Foundry 
. Update our previously developed microservice to register itself with Eureka  


---
***Approximate time: 20 minutes***
--


## Exercises

=== `Run the Eureka Server`

. Change to the lab directory:
+
----
$ cd $COURSE_HOME/springbox-eureka
----

. Build the application:
+
----
$ mvn package
----

. Run the application:
+
----
$ java -jar target/springbox-eureka-0.0.1-SNAPSHOT.jar
----

. In a browser, visit http://localhost:8761 and verify that everything is working properly:
+
image::/images/eureka_1.png[]

=== `Setup the Configuration`

. Our Config Server has to be set up to consistently configure the Eureka Client across all of our applications.
In your config repo, open `application.yml` and add the following:
+
----
eureka:
  instance:
    leaseRenewalIntervalInSeconds: 10
    metadataMap:
      instanceId: ${vcap.application.instance_id:${spring.application.name}:${server.port:8080}}
----

. Stage, commit, and push your changes:
+
----
git add . && git commit -m "swap greeting" && git push origin master
----

=== `Run config server`

. A completed `springbox-config-server` project has been placed in `$COURSE_HOME/springbox-config-server` for your convenience.
In a different terminal window, change to that directory, rebuild, and run the application:
+
----
$ cd `$COURSE_HOME/springbox-config-server`
$ mvn package
$ java -jar target/springbox-config-server-0.0.1-SNAPSHOT.jar
----

=== `Set up the springbox-catalog app to use Eureka`

. Change to the lab directory:
+
----
$ cd $COURSE_HOME/spring-cloud-eureka/initial/springbox-catalog
----
+
and import the project (via `pom.xml`) into your IDE of choice.

. Add a dependency on `spring-cloud-starter` and `spring-cloud-starter-eureka`:
+
----
<dependency>
  <groupId>org.springframework.cloud</groupId>
  <artifactId>spring-cloud-starter</artifactId>
</dependency>
<dependency>
  <groupId>org.springframework.cloud</groupId>
  <artifactId>spring-cloud-starter-eureka</artifactId>
</dependency>
----

. Now open `lab.SpringboxCatalogApplication` and add the `@EnableDiscoveryClient` annotation:
+
----
@SpringBootApplication
@EnableDiscoveryClient  // <--- ADD THIS!
public class SpringboxCatalogApplication {

    public static void main(String[] args) {
        SpringApplication.run(SpringboxProducerApplication.class, args);
    }
}
----

=== `Update the configuration`

. Change to the config-repo directory:
+
----
$ cd $COURSE_HOME/spring-cloud-config/initial/config-repo
----

. We'll use our Config Server to consistently configure the Eureka Client across all of our applications.
In your config repo, open `application.yml` and add the following:
+
----
eureka:
  instance:
    leaseRenewalIntervalInSeconds: 10
    metadataMap:
      instanceId: ${vcap.application.instance_id:${spring.application.name}:${server.port:8080}}
----

. Stage, commit, and push your changes:
+
----
git add . && git commit -m "swap greeting" && git push origin master
----

=== `Run the springbox-catalog app`

. Change to the lab directory:
+
----
$ cd $COURSE_HOME/spring-cloud-eureka/initial/springbox-catalog
----

. Now build the springbox-catalog application:
+
----
$ mvn package
----

. And run the springbox-catalog application:
+
----
$ java -jar target/springbox-catalog-0.0.1-SNAPSHOT.jar
----

. Ten seconds after the producer application finishes startup, you should see it log its registration with Eureka:
+
----
2015-02-18 22:56:00.226  INFO 42160 --- [pool-4-thread-1] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_PRODUCER/turkey:producer:8080 - Re-registering apps/PRODUCER
2015-02-18 22:56:00.227  INFO 42160 --- [pool-4-thread-1] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_PRODUCER/turkey:producer:8080: registering service...
2015-02-18 22:56:00.274  INFO 42160 --- [pool-4-thread-1] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_PRODUCER/turkey:producer:8080 - registration status: 204
----
+
You should also be able to refresh http://localhost:8761 in the browser and see the producer registered:
+
image::/images/eureka_2.png[]

=== `Create and Register the Consumer Service`

. Change to the lab directory:
+
----
$ cd $COURSE_HOME/spring-cloud-eureka/initial/springbox-consumer
----
+
and import the project (via `pom.xml`) into your IDE of choice.


. In the package `lab`, create the class `ConsumerController`, and into that class paste the following code:
+
----
@RestController
public class ConsumerController {

    @Autowired
    RestTemplate restTemplate;

    @RequestMapping(value = "/", produces = "application/json")
    String consume() {
        String response = restTemplate.getForObject("http://springbox-catalog/movies/1", String.class);
        return String.format("{\"value\":%d}", response);
    }

}
----

. Now open `io.springbox.producer.SpringboxConsumerApplication` and add the `@EnableDiscoveryClient` annotation:
+
----
@SpringBootApplication
@EnableDiscoveryClient  // <--- ADD THIS!
public class SpringboxConsumerApplication {

    public static void main(String[] args) {
        SpringApplication.run(SpringboxConsumerApplication.class, args);
    }
}
----

. In `src/main/resources/application.properties`, set the `server.port` property:
+
----
server.port=8081
----

. Create the file `src/main/resources/bootstrap.yml` and paste in the following source:
+
----
spring:
  application:
    name: consumer
----

. Now build the consumer application:
+
----
$ mvn package
----

. And run the consumer application:
+
----
$ java -jar target/springbox-consumer-0.0.1-SNAPSHOT.jar
----

. Ten seconds after the consumer application finishes startup, you should see it log its registration with Eureka:
+
----
2015-02-18 23:29:55.703  INFO 45265 --- [pool-4-thread-1] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_CONSUMER/turkey:consumer:8081 - Re-registering apps/CONSUMER
2015-02-18 23:29:55.703  INFO 45265 --- [pool-4-thread-1] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_CONSUMER/turkey:consumer:8081: registering service...
2015-02-18 23:29:55.729  INFO 45265 --- [pool-4-thread-1] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_CONSUMER/turkey:consumer:8081 - registration status: 204
----
+
You should also be able to refresh http://localhost:8761 in the browser and see the producer registered:
+
image::/images/eureka_3.png[]

. Using `curl`, test the consumer application and show that it is receiving values from the producer:
+
----
curl -i localhost:8081
HTTP/1.1 200 OK
Content-Length: 11
Content-Type: application/json;charset=UTF-8Date: Thu, 19 Feb 2015 07:32:21 GMT
Server: Apache-Coyote/1.1
X-Application-Context: consumer:8081

{
    "value": {
        "genres": [
            {
                "id": 1003,
                "mlId": "3",
                "name": "Animation"
            },
            {
                "id": 1004,
                "mlId": "4",
                "name": "Children's"
            },
            {
                "id": 1005,
                "mlId": "5",
                "name": "Comedy"
            }
        ],
        "id": 1000,
        "mlId": "1",
        "title": "Toy Story (1995)"
    }
}
----

=== `Deploy the Eureka Server to Cloud Foundry`

. Create an application manifest in `manifest.yml`:
+
[source,yml]
----
---
applications:
- name: springbox-eureka
  host: springbox-eureka-${random-word}
  memory: 512M
  instances: 1
  path: target/springbox-eureka-0.0.1-SNAPSHOT.jar
----

. Push to Cloud Foundry:
+
----
$ cf push

...

Showing health and status for app springbox-eureka in org oreilly-class / space instructor as mstine@pivotal.io...
OK

requested state: started
instances: 1/1
usage: 512M x 1 instances
urls: springbox-eureka-blowsy-catechizer.cfapps.io
last uploaded: Thu Feb 19 07:40:21 UTC 2015

     state     since                    cpu    memory           disk
#0   running   2015-02-18 11:41:10 PM   0.3%   386.1M of 512M   135.1M of 1G
----

. In a browser, visit the route assigned to your Eureka server and verify that everything is working properly:
+
image::/images/eureka_1.png[]

. Create a user-provided service representing the Eureka server (be sure to use the route assigned to your Eureka server!):
+
----
$ cf cups springbox-service-registry -p '{"uri":"http://springbox-service-registry-unmaritime-acidification.cfapps.io"}'
Creating user provided service springbox-service-registry in org oreilly-class / space instructor as mstine@pivotal.io...
OK
----

== Update the Microservices to Use Eureka

. In the config repo, update the eureka section of application.yml:
+
----
eureka:
  instance:
    leaseRenewalIntervalInSeconds: 10
    metadataMap:
      instanceId: ${vcap.application.instance_id:${spring.application.name}:${server.port:8080}}
  client:    # <--- ADD THE CLIENT SECTION!!!
    serviceUrl:
      defaultZone: ${vcap.services.springbox-service-registry.credentials.uri:http://127.0.0.1:8761}/eureka/
----

. Also add a second YAML document to `application.yml`:
+
----
---
spring:
  profiles: cloud
eureka:
  instance:
    hostname: ${vcap.application.uris[0]}
    nonSecurePort: 80
----

. Stage, commit, and push your changes:
+
----
git add . && git commit -m "swap greeting" && git push origin master
----

=== `Run Springbox-catalog in Cloud Foundry`

. Change to the lab directory:
+
----
$ cd $COURSE_HOME/spring-cloud-eureka/initial/springbox-catalog
----
+

. In `pom.xml`, add a dependency on `spring-cloud-starter-eureka`:
+
----
<dependency>
  <groupId>org.springframework.cloud</groupId>
  <artifactId>spring-cloud-starter-eureka</artifactId>
</dependency>
----

. Build the application:
+
----
$ mvn package
----

. In `manifest.yml`, add a binding to `springbox-service-registry`:
+
----
---
applications:
- name: springbox-catalog
  host: springbox-catalog-${random-word}
  memory: 512M
  instances: 1
  timeout: 90
  path: target/springbox-catalog-0.0.1-SNAPSHOT.jar
  env:
    SPRING_PROFILES_ACTIVE: cloud
  services:
    - springbox-catalog-db
    - springbox-config-service
    - springbox-service-registry
----

. Push the application:
+
----
$ cf push

...

Showing health and status for app springbox-catalog in org oreilly-class / space instructor as mstine@pivotal.io...
OK

requested state: started
instances: 1/1
usage: 512M x 1 instances
urls: springbox-catalog-overwild-nonrevival.cfapps.io
last uploaded: Fri Feb 20 02:06:02 UTC 2015

     state     since                    cpu     memory           disk
#0   running   2015-02-19 06:07:35 PM   81.0%   446.1M of 512M   150.9M of 1G
----

. Ten seconds after the catalog application finishes startup, you should see it log its registration with Eureka:
+
----
2015-02-19T18:07:45.21-0800 [App/0]      OUT 2015-02-20 02:07:45.212  INFO 31 --- [pool-7-thread-1] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_SPRINGBOX-CATALOG/springbox-catalog-overwild-nonrevival.cfapps.io:d458a40215004b2c902c47a157c2a2
10 - Re-registering apps/SPRINGBOX-CATALOG
2015-02-19T18:07:45.21-0800 [App/0]      OUT 2015-02-20 02:07:45.212  INFO 31 --- [pool-7-thread-1] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_SPRINGBOX-CATALOG/springbox-catalog-overwild-nonrevival.cfapps.io:d458a40215004b2c902c47a157c2a2
10: registering service...
2015-02-19T18:07:45.27-0800 [App/0]      OUT 2015-02-20 02:07:45.277  INFO 31 --- [pool-7-thread-1] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_SPRINGBOX-CATALOG/springbox-catalog-overwild-nonrevival.cfapps.io:d458a40215004b2c902c47a157c2a2
10 - registration status: 204
----
+
You should also be able to refresh the route of your PWS deployed Eureka in the browser and see the catalog registered:
+
image::/images/eureka_4.png[]
